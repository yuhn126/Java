-객체 지향 프로그래밍
   -OOP : Object Oriented Programming

-객체(object)란?
    : 물리적으로 존재하거나(자동차, 책, 사람) 추상적인 것(회사, 날짜) 중에서 자신의 속성과 동작을 가지는 모든 것
    : 객체는 필드(=속성)과 메소드(=동작)로 구성된 자바 객체로 모델링 할 수 있음

-객체의 상호 작용
    : 객체들은 서로 간에 기능(동작)을 이용하고 데이터를 주고 받음
    : 자바의 객체도 서로 간에 메소드를 호출하고 결과를 받음

	리턴값 = 전자계산기객체.메소드(매개값1, 매개값2, ...);
	int result = Calculator.add(10, 20);

-객체 간의 관계
     : 객체 지향 프로그램에서는 객체는 다른 객체와 관계를 맺고 있음
     : 관계의 종류
  	1. 집합 관계 : 완성품과 부품의 관계
	2. 사용 관계 : 객체가 다른 객체를 사용하는 관계
	3. 상속 관계 : 종류 객체와 구체적인 사물 객체 관계

-객체 지향 프로그래밍의 특징 (캡슐화, 상속, 다형성) (기사에도 나온다!)
     1. 캡슐화(Encapsulation)
	: 객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것
	  외부 객체는 객체 내부의 구조를 알지 못하며 객체가 노출해서 제공하는 필드와 메소드만 이용 가능
	  캡슐화는 외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 하는것이 목적
	  자바는 캡슐화된 멤버를 노출시킬지 숨길 것인지를 결정하기 위해 접근 제한자(Access Modifier)를 사용
     2. 상속(Inheritance)
	: 부모 역할의 상위 객체와 자식 역할의 하위 객체
	  상위 객체는 자기가 가지고 있는 필드와 메소드를 하위 객체에게 물려주어 하위 객체가 사용할 수 있도록 함
	  상위 객체를 재사용해 하위 객체를 쉽고 빨리 설계할 수 있도록 도와줌, 반복된 코드의 중복 최소화, 유지보수 시간 최소화, 객체의 다형성 구현